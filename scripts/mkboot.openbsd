#!/usr/bin/env bash

# make openbsd boot cd ISO

set -ue

# called as: doas /root/mkboot.openbsd $mac $version $arch $url $src_iso $dst_dir
echo "Generating OpenBSD netboot ISO"

REPO_ROOT=$1
OSREV=$2
MACHINE=$3
MKBOOT_USER=$4

#SERIAL=
#if [ $# -gt 5 ]; then
#    SERIAL=$6
#fi

# argument examples:
#
# REPO_ROOT=/home/mkrueger/go/src/github.com/rstms/netboot
# OSREV=7.5
# MACHINE=amd64
# MKBOOT_USER=mkrueger

fail() {
  echo >&2 $0: "$@"
  exit 1
}

OS=$(uname)
case $OS in 
    OpenBSD) ;;
    *) fail "OpenBSD is required for this operation";;
esac 

[ -n "$REPO_ROOT" ] || fail "no REPO_ROOT"
[ -n "$OSREV" ] || fail "no OSREV (version)"
[ -n "$MACHINE" ] || "fail no MACHINE (arch)"
[ -n "$MKBOOT_USER" ] || "fail no MKBOOT_USER"

TAG=$(tr <<<$OSREV -d '.')
SRC_ISO=$REPO_ROOT/template/dist/openbsd/$OSREV/$MACHINE/cd${TAG}.iso
DST_ISO=$REPO_ROOT/template/ipxe/openbsd-$OSREV-$MACHINE.iso
DST_RD=$REPO_ROOT/template/ipxe/bsd-$OSREV-$MACHINE.rd
RC_NETBOOT=$REPO_ROOT/template/mkboot/rc.netboot.openbsd

DIR=$(mktemp -td netboot-mkboot-openbsd-XXXXXXXXX)
RD=$DIR/rd
CD=$DIR/cd
ISO=$DIR/iso

#echo DST_ISO=$DST_ISO
#echo SRC_ISO=$SRC_ISO
#echo OSREV=$OSREV
#echo MACHINE=$MACHINE
#echo MKBOOT_USER=$MKBOOT_USER

vnd0_clear() {
    vnconfig -l | grep -q 'vnd0: not in use'
}

vnd1_clear() {
    vnconfig -l | grep -q 'vnd1: not in use'
}

vnd2_clear() {
    vnconfig -l | grep -q 'vnd2: not in use'
}


cleanup() {
    mounted=$(mount | awk '/^\/dev\/vnd0/{ print $1 }')
    if [ -n "$mounted" ]; then
	umount $mounted
    fi
    vnd0_clear || vnconfig -u vnd0
    mounted=$(mount | awk '/^\/dev\/vnd1/{ print $1 }')
    if [ -n "$mounted" ]; then
	umount $mounted
    fi
    vnd1_clear || vnconfig -u vnd1
    mounted=$(mount | awk '/^\/dev\/vnd2/{ print $1 }')
    if [ -n "$mounted" ]; then
	umount $mounted
    fi
    vnd2_clear || vnconfig -u vnd2

    if [ -n "$DIR" ]; then
	if [ -d $DIR ]; then
	    rm -rf $DIR
	fi
    fi
}

#cleanup

vnd0_clear || fail 'vnd0 in use' 
vnd1_clear || fail 'vnd1 in use' 
vnd2_clear || fail 'vnd2 in use' 

trap cleanup EXIT

modify_ramdisk_on_vnd1() {

  # mount ramdisk using vnd1
  vnconfig vnd1 $DIR/ramdisk.img
  rm -rf $RD
  mkdir $RD
  mount /dev/vnd1a $RD

  # add netboot autoinstall shim to ramdisk
  install -o root -g wheel -m 0755 $RC_NETBOOT $RD/rc.netboot

  # add rc.netboot pre_install call to ramdisk /.profile
  awk <$RD/.profile '{print $0} /autoinstall -x/{print "\t/rc.netboot pre_install"}' >$RD/_profile
  mv $RD/_profile $RD/.profile
  chmod 0755 $RD/.profile
  
  # add rc.netboot post_install call to ramdisk /install.sub
  awk <$RD/install.sub '/exec reboot$/{ print "\t/rc.netboot post_install" } {print $0}' >$RD/_install.sub
  mv $RD/_install.sub $RD/install.sub
  chmod 0755 $RD/install.sub

  # unmount ramdisk
  umount $RD
  vnconfig -u vnd1
  rmdir $RD

}

build_iso() {

  # create directory for cd filesystem
  mkdir -p $CD/${OSREV}/${MACHINE}
  mkdir $CD/etc
  
  # mount source ISO on vnd0 and extract files
  mkdir $ISO
  vnconfig vnd0 $SRC_ISO
  mount /dev/vnd0a $ISO
  cp ${ISO}/${OSREV}/${MACHINE}/bsd* ${CD}/${OSREV}/${MACHINE}/
  cp ${ISO}/${OSREV}/${MACHINE}/cdb* ${CD}/${OSREV}/${MACHINE}/
  
  # free up vnd0
  umount $ISO
  vnconfig -u vnd0
  rmdir $ISO
  
  # extract ramdisk from kernel
  rdsetroot -x ${CD}/${OSREV}/${MACHINE}/bsd.rd $DIR/ramdisk.img
  
  modify_ramdisk_on_vnd1 $DIR/ramdisk.img
  
  # insert modified ramdisk into cd image kernel
  rdsetroot ${CD}/${OSREV}/${MACHINE}/bsd.rd $DIR/ramdisk.img

  # copy bsd ramdisk to IPXE output dir
  cp ${CD}/${OSREV}/${MACHINE}/bsd.rd $DST_RD
  
  # point bootloader at ramdisk kernel
  echo "set image /${OSREV}/${MACHINE}/bsd.rd" >$CD/etc/boot.conf
  
  # optionally enable serial
  #if [ -n "$SERIAL" ]; then
  #  echo "set tty $SERIAL" >>$CD/etc/boot.conf
  #fi
  
  # build the iso
  mkhybrid -a -R -T -L -l -d -D -N -o $DST_ISO \
          -A "OpenBSD ${OSREV} ${MACHINE} netboot CD" \
  	    -P "Copyright (c) `date +%Y` Theo de Raadt, The OpenBSD project" \
  	    -p "Theo de Raadt <deraadt@openbsd.org>, install modifications by Matt Krueger <mkrueger@rstms.net>" \
  	    -V "OpenBSD/${MACHINE}   ${OSREV} netboot CD" \
  	    -b ${OSREV}/${MACHINE}/cdbr \
              -c ${OSREV}/${MACHINE}/boot.catalog \
  	    $CD
}

build_iso
chown -R $MKBOOT_USER.$MKBOOT_USER $DIR
chown $MKBOOT_USER.$MKBOOT_USER $DST_ISO
chmod 0660 $DST_ISO
ls -l $DST_ISO
